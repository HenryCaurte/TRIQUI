#include <conio.h>
#include <graphics.h>
#include <iostream>
#include <vector>
#include <cstdlib>
#include<time.h>

using namespace std;

vector<bool> pos(9,false);

int matriz[3][3] = {-1};

//----------------------------------------------------------------------------------------------
void ganoelmejor(int a){
closegraph();
initwindow(1150,600,"GANADOR",500,200);
setbkcolor(COLOR(100,399,152));
cleardevice();
if(a == 1){
readimagefile("Imagenes/elmejor.jpg",0,0,1150,600); // colocar imagen
}
else{
readimagefile("Imagenes/GANE.jpg",0,0,1150,600); // colocar imagen
}
}

void inicio(){
initwindow(1150,600,"INICIO",500,200);
cleardevice();
readimagefile("Imagenes/1.jpg",0,0,1150,600);
}

//------------------------------------------------------- REGLAS -----------------------------------------

int reglas(){ // reglas de la vida y de la muerte de triqui �ejeje
int contv = 0; // contador verticals
int conth= 0; // contador horizonatal
int contvmachine = 0; // contador verticals maquina
int conthmachine = 0; // contador horizonatal maquina

 for(int i = 0; i < 3; i ++){

        // esto evalua las diagonales
    if(((matriz[2][0] == 2 && matriz[1][1] == 2 && matriz[0][2] == 2) || (matriz[0][0] == 2 && matriz[1][1] == 2 && matriz[2][2] == 2))){
//gano humano
  ganoelmejor(true);
    return 1;
  // break;
    }
    if(((matriz[2][0] == 1 && matriz[1][1] == 1 && matriz[0][2] == 1) || (matriz[0][0] == 1 && matriz[1][1] == 1 && matriz[2][2] == 1))){
//gano maquina
    ganoelmejor(false);
    return 2;
//break;
    }

    for(int j  = 0; j <3; j++){
        if (matriz[i][j] == 2){  // analiza los verticales humano
            contv++;
        }
        if (matriz[j][i] == 2){  // analiza los horizontales humano
            conth++;
        }
        ////////////////maquina /////////////////
        if (matriz[i][j] == 1){  // analiza los verticales
            contvmachine++;
        }
        if (matriz[j][i] == 1){  // analiza los horizontales
            conthmachine++;
        }
        ////////////////EVALUA GANADOR ///////////////////
        if(contv == 3 ||  conth == 3){ // cualquiera de las dos gana
   cout<<"GANASTE , GENIAL"<<endl;
ganoelmejor(true);
return 1;
        }
        if(contvmachine == 3 ||  conthmachine == 3){ // cualquiera de las dos gana
    cout<<"GANE YO , MAS SUERTE A LA PROXIMA"<<endl;
    ganoelmejor(false);
    return 2;

        }
    }
    contv = 0;
    conth = 0;
    contvmachine = 0;
    conthmachine = 0;
 }
 return 0;
}
//////////////////////////////////////////////////DADOS //////////////////

void caras(int x, int xc1,int yc)
{
    int xc2=600;

    setcolor(WHITE);
    bar(xc1,yc,xc1+300,yc+300);
    int trama;
    trama = SOLID_FILL;
    if(xc1 < 300){
    setfillstyle( trama, BLACK );
    }
    else{
        setfillstyle( trama, WHITE);
    }

    switch(x){
case 1:
    fillellipse(xc1+150,yc+150,30,30);  // uno
break;
case 2:
    fillellipse(((300))/3 +xc1,((300))/3 +yc, 30,30);
    fillellipse(((300)*2)/3 +xc1,((300*2))/3 +yc, 30,30);
break;
case 3:
    fillellipse(((300))/3 +(xc1-30),((300))/3 +(yc-30), 30,30);
    fillellipse(xc1+150,yc+150,30,30);
    fillellipse(((300)*2)/3 +(xc1+30),((300*2))/3 +(yc+30), 30,30);
break;
case 4:
    fillellipse(((300))/3 +xc1,((300))/3 +yc, 30,30);
    fillellipse(((300)*2)/3 +xc1,((300*2))/3 +yc, 30,30);
    fillellipse(((300)*2)/3 +xc1,((300))/3 +yc, 30,30);
    fillellipse(((300))/3 +xc1,((300*2))/3 +yc, 30,30);
break;
case 5:
    fillellipse(((300))/3 +(xc1-30),((300))/3 +(yc-30), 30,30);
    fillellipse(((300)*2)/3 +(xc1+30),((300))/3 +(yc-30), 30,30);
    fillellipse(((300)*2)/3 +(xc1+30),((300)*2)/3 +(yc+30), 30,30);
    fillellipse(((300))/3 +(xc1-30),((300*2))/3 +(yc+30), 30,30);
    fillellipse(xc1+150,yc+150,30,30);
break;
case 6:
    fillellipse(((300))/3 +(xc1-30),((300))/3 +(yc-30), 30,30);
    fillellipse(((300)*2)/3 +(xc1+30),((300))/3 +(yc-30), 30,30);
    fillellipse(((300)*2)/3 +(xc1+30),((300)*2)/3 +(yc+30), 30,30);
    fillellipse(((300))/3 +(xc1-30),((300*2))/3 +(yc+30), 30,30);
    fillellipse(xc1+70,yc+150,30,30);
    fillellipse(xc1+230,yc+150,30,30);
break;
}
getch();
}

bool dados(){
char r;
srand(time(0));
int a = 1;   // Dado mio
int a2 = 0;  // Dado maquina

initwindow(1000,600,"Dados",500,200);
cleardevice();
readimagefile("Imagenes/dado.jpg",0,0,1000,600);
getch();
do{
a = rand()%6 +1;
caras(a,100,200);
a2 = rand()%6 +1;
caras(a2,600,200);
if(a== a2){
    // poner imagen de ups, son iguales
}
}while(a==a2);
if(a> a2){
        closegraph();
return true;  //true humano

}
else{
        closegraph();
    return false;  // false maquina porque es falsa

}

return 0;
}


/////////////////////////////////////////////////////////////////////////// CIRCULOS DELTRIQUI ///////////////////
int escoje(){
int pete = 9;
initwindow(1000,600,"ESCOJE",500,200);
readimagefile("Imagenes/Escojer.jpg",0,0,1000,600);
int xm,ym; // declaramos las posiciones del mause
do{
if(ismouseclick(WM_LBUTTONDOWN)){ // para presionar el boton
    getmouseclick(WM_LBUTTONDOWN,xm,ym);

    if(xm>0 && xm<500){
            pete = 1;
        return 1;
    }
    else{
            pete =1 ;
        return 2;
    }
}
}while(pete!=1);
getch();
return 0;
}


void Ciculo(int x, int y){ /////////////ciruclito para el humano  -- azul
   int trama, color;
   trama = SOLID_FILL;
   color = 3; // 9
   setfillstyle( trama, color );

   fillellipse( x, y, 80, 80 );
}
void equis2(int x, int y){ // simbolo del pc -- Amarillo
   int trama, color;
   trama = SOLID_FILL;
   color = 6; // voy en el 12 verificando
   setfillstyle( trama, color ); // la forma, meh
   fillellipse( x, y, 80, 80 );

}

void equis(int x, int y){ // simbolo del pc -- VERDE
   int trama, color;
   trama = SOLID_FILL;
   color = 2;
   setfillstyle( trama, color );

   fillellipse( x, y, 80, 80 );

}

void turno(int tiro, int e){ // escojer
switch (tiro) {
case 1:
    switch (e){
    case 1:
     Ciculo(300,200);
     break;
    case 2:
    equis2(300,200);
    break;
    }

    pos[0] = true;
    matriz[0][0] = 2;      // para decir que ya se uso
break;
case 2:
        switch (e){
    case 1:
     Ciculo(500,200);
     break;
    case 2:
    equis2(500,200);
    break;
    }
    pos[1] = true;
    matriz[1][0] = 2;
break;
case 3:
        switch (e){
    case 1:
     Ciculo(700,200);
     break;
    case 2:
    equis2(700,200);
    break;
    }
    pos[2] = true;
    matriz[2][0] = 2;
break;
case 4:
        switch (e){
    case 1:
     Ciculo(300,400);
     break;
    case 2:
    equis2(300,400);
    break;
    }
    pos[3] = true;
    matriz[0][1] = 2;
break;
case 5:
        switch (e){
    case 1:
     Ciculo(500,400);
     break;
    case 2:
    equis2(500,400);
    break;
    }
    pos[4] = true;
    matriz[1][1] = 2;
break;
case 6:
        switch (e){
    case 1:
     Ciculo(700,400);
     break;
    case 2:
    equis2(700,400);
    break;
    }
    pos[5] = true;
    matriz[2][1] = 2;
break;
case 7:
           switch (e){
    case 1:
     Ciculo(300,600);
     break;
    case 2:
    equis2(300,600);
    break;
    }
    pos[6] = true;
    matriz[0][2] = 2;
break;
case 8:
           switch (e){
    case 1:
     Ciculo(500,600);
     break;
    case 2:
    equis2(500,600);
    break;
    }
    pos[7] = true;
    matriz[1][2] = 2;
break;
case 9:
           switch (e){
    case 1:
     Ciculo(700,600);
     break;
    case 2:
    equis2(700,600);
    break;
    }
    pos[8] = true;
    matriz[2][2] = 2;

break;
}
}


void turnoM(int tiro){   // Los switch case son para colocar los simbolitos
switch (tiro) {
case 1:
    equis(300,200);
    pos[0] = true;
    matriz[0][0] = 1;
break;
case 2:
    equis(500,200);
    pos[1] = true;
    matriz[1][0] = 1;
break;
case 3:
    equis(700,200);
    pos[2] = true;
    matriz[2][0] = 1;
break;
case 4:
    equis(300,400);
    pos[3] = true;
    matriz[0][1] = 1;
break;
case 5:
    equis(500,400);
    pos[4] = true;
    matriz[1][1] = 1;
break;
case 6:
    equis(700,400);
    pos[5] = true;
    matriz[2][1] = 1;
break;
case 7:
    equis(300,600);
    pos[6] = true;
    matriz[0][2] = 1;
break;
case 8:
    equis(500,600);
    pos[7] = true;
    matriz[1][2] = 1;
break;
case 9:
    equis(700,600);
    pos[8] = true;
    matriz[2][2] = 1;
break;
}
}
int teclado(char r){  // para que me lea cosas de teclado, en casos
int aux;

switch(r){
case '1':
    aux =1 ;
break;
case '2':
    aux =2 ;
break;
case '3':
    aux =3;
break;
case '4':
    aux = 4;
break;
case '5':
    aux = 5;
break;
case '6':
    aux = 6;
break;
case '7':
    aux = 7;
break;
case '8':
    aux = 8;
break;
case '9':
    aux = 9;
break;
default:
    return 0;
break;
}
return aux;
}


void tirarH(int n){   ///////////Tirar humano
    char r;
    cout<<"JUGADOR 1 TIRA: "<<endl;
    int ala;
    do{
    r = getch();
    ala = teclado(r);
      // lee la posicion// verifica si esta o no ocupado
    cout<<"El espacio ya esta ocupado"<<endl;

    }while(pos[ala-1]==true);
         pos[ala-1]==true;   /////para ocupar ya el espacio
         turno(ala,n); // lo lee
         return;
}

int tirarM(){  // Tirar maquina
int aux = 0;
int pensar = 0; // piensa ñejeje
int contador = 0; //contada cuantos cuadros quedan disponibles
srand(time(NULL));

//necesito que analise los que estan puestos

    do{      // verifica si esta o no ocupado
    aux =rand()%9+1;

    }while(pos[aux-1]);  //si estan usados se replantea otro numero random
         pos[aux-1]==true;
         turnoM(aux);

return aux;
}

//////////////////////////////////////////////////////// INTERFAZ JUEGO ////////////////////////////////////
void juego(bool sociedad, int n){
initwindow(1000,800,"JUEGO",500,200);
setbkcolor(4);
cleardevice();
readimagefile("Imagenes/Fondo.jpg",0,0,1000,800);

// Barras verticales
setcolor( 4 );
bar(200,100,210,700);
bar(400,100,410,700);
bar(600,100,610,700);
bar(800,100,810,710);
// Barras horizontales
bar(200,100,800,110);
bar(200,300,800,310);
bar(200,500,800,510);
bar(200,700,800,710);
int cont = 0;
if(sociedad == true){
        do{
    tirarH(n);
    if(reglas() == 1 || reglas()==2){
        return;
    }
    tirarM();

    for(bool i : pos){
        if(i == true){
            cont++;
        }
    }
    if(cont == 9){
        return;
    }

if(reglas() == 1 || reglas()==2){
        return;
    }
    cont == 0;
}while(true);

}else {
//maquina
 do{
    tirarM();
    if(reglas() == 1 || reglas()==2){
        return;
    }
    tirarH(n);
    for(bool i : pos){
        if(i == true){
            cont++;
        }
    }
    if(cont == 9){
        return;
    }

if(reglas() == 1 || reglas()==2){
        return;
    }
    cont == 0;
}while(true);
}
}


int main(){
    //--------------
    char m;
    bool p;
    //-------------
do{
for(int i = 0; i < 9; i++){
    pos[i] = false;
}

for (int i = 0; i < 3 ; i ++){
    for(int j = 0; j < 3; j++){
        matriz[i][j] = -1; //cambiar  a 0 para humano 1 maquina -1 y sumarlos
    }
}
closegraph();
inicio();
//bienvenido
getch();
closegraph();
bool sociedad = dados();
int n = escoje();
juego(sociedad,n);
getch();
ganoelmejor(reglas());

//error se reinicia en humano
}while(true);

getch();
}
